;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/06/2019 15:54:38
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF0E  	GOTO        28
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_main:
;Project_008_Desafio.c,9 :: 		void main() {
;Project_008_Desafio.c,11 :: 		unsigned char i = 0B00000000;
0x001C	0x6A15      	CLRF        main_i_L0 
0x001E	0x6A16      	CLRF        main_auxFlagRB0_L0 
0x0020	0x6A17      	CLRF        main_auxFlagRB1_L0 
;Project_008_Desafio.c,22 :: 		INTCON2.RBPU = 0;  //Habilita a chave global dos resistores de pull-up presente no PORTB
0x0022	0x9EF1      	BCF         INTCON2, 7 
;Project_008_Desafio.c,23 :: 		ADCON1 |= 0x0F;  //Configura todos os pinos compartilhados, ou multiplexados, como digital
0x0024	0x0E0F      	MOVLW       15
0x0026	0x12C1      	IORWF       ADCON1, 1 
;Project_008_Desafio.c,28 :: 		TRISB.RB0 = 1; //Configura o pino 0 do PORTB como entrada - Contagem crescente
0x0028	0x8093      	BSF         TRISB, 0 
;Project_008_Desafio.c,29 :: 		TRISB.RB1 = 1; //Configura o pino 1 do PORTB como entrada - Contagem decrescente
0x002A	0x8293      	BSF         TRISB, 1 
;Project_008_Desafio.c,31 :: 		TRISD = 0; //Configura o PORTD como saída
0x002C	0x6A95      	CLRF        TRISD 
;Project_008_Desafio.c,32 :: 		PORTD = 0; //Estabelece nível zero na saída do PORTD (todos os pino do PORT) - Para os leds iniciarem apagados
0x002E	0x6A83      	CLRF        PORTD 
;Project_008_Desafio.c,35 :: 		while(TRUE){
L_main0:
;Project_008_Desafio.c,37 :: 		if(PORTB.RB1 == 0 && auxFlagRB1 == 0){
0x0030	0xB281      	BTFSC       PORTB, 1 
0x0032	0xD01C      	BRA         L_main4
0x0034	0x5017      	MOVF        main_auxFlagRB1_L0, 0 
0x0036	0x0A00      	XORLW       0
0x0038	0xE119      	BNZ         L_main4
L__main21:
;Project_008_Desafio.c,38 :: 		i = ~((~i) <<= 1);  //Equivale a sequencia de comandos: i = ~i; i <<= 1; i = ~i;
0x003A	0x1C15      	COMF        main_i_L0, 0 
0x003C	0x6E02      	MOVWF       R2 
0x003E	0xF000C002  	MOVFF       R2, R0
0x0042	0x3600      	RLCF        R0, 1 
0x0044	0x9000      	BCF         R0, 0 
0x0046	0xF002C000  	MOVFF       R0, R2
0x004A	0x1E00      	COMF        R0, 1 
0x004C	0xF015C000  	MOVFF       R0, main_i_L0
;Project_008_Desafio.c,39 :: 		PORTD = i;
0x0050	0xFF83C000  	MOVFF       R0, PORTD
;Project_008_Desafio.c,40 :: 		auxFlagRB1 = 1;
0x0054	0x0E01      	MOVLW       1
0x0056	0x6E17      	MOVWF       main_auxFlagRB1_L0 
;Project_008_Desafio.c,41 :: 		Delay_ms(50);
0x0058	0x0E82      	MOVLW       130
0x005A	0x6E0C      	MOVWF       R12, 0
0x005C	0x0EDD      	MOVLW       221
0x005E	0x6E0D      	MOVWF       R13, 0
L_main5:
0x0060	0x2E0D      	DECFSZ      R13, 1, 0
0x0062	0xD7FE      	BRA         L_main5
0x0064	0x2E0C      	DECFSZ      R12, 1, 0
0x0066	0xD7FC      	BRA         L_main5
0x0068	0x0000      	NOP
0x006A	0x0000      	NOP
;Project_008_Desafio.c,42 :: 		}
L_main4:
;Project_008_Desafio.c,43 :: 		if(PORTB.RB1 == 1 && auxFlagRB1 == 1){
0x006C	0xA281      	BTFSS       PORTB, 1 
0x006E	0xD00E      	BRA         L_main8
0x0070	0x5017      	MOVF        main_auxFlagRB1_L0, 0 
0x0072	0x0A01      	XORLW       1
0x0074	0xE10B      	BNZ         L_main8
L__main20:
;Project_008_Desafio.c,44 :: 		auxFlagRB1 = 0;
0x0076	0x6A17      	CLRF        main_auxFlagRB1_L0 
;Project_008_Desafio.c,45 :: 		Delay_ms(50);
0x0078	0x0E82      	MOVLW       130
0x007A	0x6E0C      	MOVWF       R12, 0
0x007C	0x0EDD      	MOVLW       221
0x007E	0x6E0D      	MOVWF       R13, 0
L_main9:
0x0080	0x2E0D      	DECFSZ      R13, 1, 0
0x0082	0xD7FE      	BRA         L_main9
0x0084	0x2E0C      	DECFSZ      R12, 1, 0
0x0086	0xD7FC      	BRA         L_main9
0x0088	0x0000      	NOP
0x008A	0x0000      	NOP
;Project_008_Desafio.c,46 :: 		}
L_main8:
;Project_008_Desafio.c,49 :: 		if(PORTB.RB0 == 0 && auxFlagRB0 == 0){
0x008C	0xB081      	BTFSC       PORTB, 0 
0x008E	0xD017      	BRA         L_main12
0x0090	0x5016      	MOVF        main_auxFlagRB0_L0, 0 
0x0092	0x0A00      	XORLW       0
0x0094	0xE114      	BNZ         L_main12
L__main19:
;Project_008_Desafio.c,50 :: 		i >>= 1;
0x0096	0xF000C015  	MOVFF       main_i_L0, R0
0x009A	0x3200      	RRCF        R0, 1 
0x009C	0x9E00      	BCF         R0, 7 
0x009E	0xF015C000  	MOVFF       R0, main_i_L0
;Project_008_Desafio.c,51 :: 		PORTD = i;
0x00A2	0xFF83C000  	MOVFF       R0, PORTD
;Project_008_Desafio.c,52 :: 		auxFlagRB0 = 1;
0x00A6	0x0E01      	MOVLW       1
0x00A8	0x6E16      	MOVWF       main_auxFlagRB0_L0 
;Project_008_Desafio.c,53 :: 		Delay_ms(50);
0x00AA	0x0E82      	MOVLW       130
0x00AC	0x6E0C      	MOVWF       R12, 0
0x00AE	0x0EDD      	MOVLW       221
0x00B0	0x6E0D      	MOVWF       R13, 0
L_main13:
0x00B2	0x2E0D      	DECFSZ      R13, 1, 0
0x00B4	0xD7FE      	BRA         L_main13
0x00B6	0x2E0C      	DECFSZ      R12, 1, 0
0x00B8	0xD7FC      	BRA         L_main13
0x00BA	0x0000      	NOP
0x00BC	0x0000      	NOP
;Project_008_Desafio.c,54 :: 		}
L_main12:
;Project_008_Desafio.c,55 :: 		if(PORTB.RB0 == 1 && auxFlagRB0 == 1){
0x00BE	0xA081      	BTFSS       PORTB, 0 
0x00C0	0xD00E      	BRA         L_main16
0x00C2	0x5016      	MOVF        main_auxFlagRB0_L0, 0 
0x00C4	0x0A01      	XORLW       1
0x00C6	0xE10B      	BNZ         L_main16
L__main18:
;Project_008_Desafio.c,56 :: 		auxFlagRB0 = 0;
0x00C8	0x6A16      	CLRF        main_auxFlagRB0_L0 
;Project_008_Desafio.c,57 :: 		Delay_ms(50);
0x00CA	0x0E82      	MOVLW       130
0x00CC	0x6E0C      	MOVWF       R12, 0
0x00CE	0x0EDD      	MOVLW       221
0x00D0	0x6E0D      	MOVWF       R13, 0
L_main17:
0x00D2	0x2E0D      	DECFSZ      R13, 1, 0
0x00D4	0xD7FE      	BRA         L_main17
0x00D6	0x2E0C      	DECFSZ      R12, 1, 0
0x00D8	0xD7FC      	BRA         L_main17
0x00DA	0x0000      	NOP
0x00DC	0x0000      	NOP
;Project_008_Desafio.c,58 :: 		}
L_main16:
;Project_008_Desafio.c,59 :: 		}
0x00DE	0xD7A8      	BRA         L_main0
;Project_008_Desafio.c,60 :: 		}
L_end_main:
0x00E0	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C     [198]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    main_i_L0
0x0016       [1]    main_auxFlagRB0_L0
0x0017       [1]    main_auxFlagRB1_L0
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
